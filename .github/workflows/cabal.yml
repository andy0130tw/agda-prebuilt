name: Linux (cabal)

on:
  push:
    paths:
    - 'src/**'
    - '.github/workflows/cabal.yml'
  pull_request:
    paths:
    - 'src/**'
    - '.github/workflows/cabal.yml'

jobs:
  Ubuntu-x86_64:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && !contains(github.event.head_commit.message, '[github skip]')
      && !contains(github.event.head_commit.message, '[skip github]')

    strategy:
      matrix:
        os:
        # - ubuntu-16.04
        - ubuntu-18.04
        # - ubuntu-20.04
        agda-ver:
        - 'v2.6.1'
        # - master
        cabal-ver:
        - '3.2'
        ghc-ver:
        - '8.10.1'

    runs-on: ${{ matrix.os }}

    env:
      AGDA_SRC: './agda-src'
      AGDA_DIST: './dist'

    steps:
    - name: Setup environment
      run: |
        sudo apt update
        sudo apt install alex happy libicu-dev

    - uses: actions/setup-haskell@v1.1.1
      with:
        ghc-version: ${{ matrix.ghc-ver }}
        cabal-version: ${{ matrix.cabal-ver }}

    - uses: actions/checkout@v2.3.2
      with:
        repository: agda/agda
        ref: ${{ matrix.agda-ver }}
        path: ${{ env.AGDA_SRC }}

    - name: Edit the cabal file
      working-directory: ${{ env.AGDA_SRC }}
      run: |
        sed -i '/^executable agda$/a\  ld-options: -static' Agda.cabal
        # see https://github.com/agda/agda/issues/4216
        touch doc/user-manual.pdf

    - name: Summarize the environment
      working-directory: ${{ env.AGDA_SRC }}
      run: |
        export AGDA_VERSION=$(cabal info . | head -n 1 | cut -d " " -f 2 | cut -d "-" -f 2)
        echo "*** GHC version ***"     && ghc --version
        echo "*** cabal version ***"   && cabal --version
        echo "*** Agda version ***"    && echo $AGDA_VERSION

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: "~/.cabal"
        key: ${{ runner.os }}-cabal-${{ matrix.cabal-ver }}-${{ matrix.cabal-ver }}-${{ hashFiles('**/plan.json') }}-r1

    - name: Cache dists
      uses: actions/cache@v2
      with:
        path: |
          ${{ format('{0}/dist*', env.AGDA_SRC) }}
        key: ${{ runner.os }}-cabal-${{ matrix.ghc-ver }}-${{ matrix.cabal-ver }}-${{ hashFiles('**/plan.json') }}-r1

    - name: Configure Agda
      working-directory: ${{ env.AGDA_SRC }}
      run: |
        cabal configure --prefix=/usr/local \
        --enable-tests \
        --disable-library-profiling \
        --disable-executable-dynamic \
        --disable-shared \
        --enable-library-stripping \
        --enable-executable-stripping \
        --ghc-options="-fPIC +RTS -M5G -RTS"

    - name: Install dependencies
      working-directory: ${{ env.AGDA_SRC }}
      run: |
        cabal build --only-dependencies -j4

    - name: Build Agda
      working-directory: ${{ env.AGDA_SRC }}
      run: |
        cabal build --prefix=/usr/local -j4

    - name: Produce Artifact
      working-directory: ${{ env.AGDA_SRC }}
      run: |
        DIST="$GITHUB_WORKSPACE/$AGDA_DIST"
        mkdir $DIST
        cp -r src/data/lib $DIST
        if [ -d "dist-newstyle" ]; then
          cp dist-newstyle/build/x86_64-*/ghc-*/*/*/*/agda $DIST
        else
          echo "*** Copying agda binary in the old-style dist folder ***"
          cp dist/build/agda/agda $DIST
        fi
        strip $DIST/agda

    - name: Test Agda (dummy)
      working-directory: ${{ env.AGDA_DIST }}
      run: |
        # TODO: test if the file is indeed static
        file ./agda

    - uses: actions/upload-artifact@v2
      with:
        name: agda-prebuilt
        path: ${{ env.AGDA_DIST }}

    - name: "For inspecting .cabal"
      uses: actions/upload-artifact@v2
      with:
        name: cabal-dir
        path: "~/.cabal"
